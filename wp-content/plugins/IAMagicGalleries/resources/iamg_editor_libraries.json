{
  //comment
  "version": 0.1,
  // This is used for debugging, whether to skip a library
  "skip": {
    "iamg_image_library": false,
    "iamg_video_library": true
  },
  //Shape Library
  "iamg_image_library": {
    "iconResource": "iamg/library_buttons.svg",
    "functionResource": "iamg/libraryEvents.js",
    //url of the svg file contacting the library.
    //    "def_url": "library_shell.svg",
    //"library_shell.svg",
    //the communication link to the server to get library objects. See API description below!
    "com_url": "&command=images",
    "com_type": "GET",
    //The group where to place the library GUI
    "group": "left",
    // Embed the library in the group, changing the panel dimensions
    "embedded": false,
    // Position of the library relative to the group. If right group, the position is of the top right corner.
    "position": {
      "x": 5,
      "y": 52
    },
    //The corner point in the library to use for position: tl, tr, bl, br, c
    "corner": "tl",
    //The properties of the library, if constructed from among the available styles.
    "properties": {
      //The library type. "circle", "tree" , "table", "hierarchical", "linear"
      "type": "table",
      //Equal height and width
      //      "size": 800,
      //      "height": 200,
      //      "width": 400,
      //For Table: the rows and columns of the table.
      "rows": 10,
      "columns": 1,
      //For table: The height is defined by a function that depands on the panel.
      //      "adaptive": true,
      //      For table and if adaptive: keeps the size the maximum provided by "height". Only changes if display is smaller
      // "max_height": true,
      //For: tree and table
      "box_width": 100,
      "box_height": 100,
      //For Tree: if true or a string, it adds an edge. If a string, it should be the style of the edge. A style may
      //also be provided in the "style.edges" object below (this has a higher precedence).
//      "edges": {
//        "stroke": "gray",
//        "stroke-width": 1
//      },
      // for circle: the thickness of the border between the center and segments.
      //      "middle_border_size": 4,
      //The diameter of the center, recomanded to be ("size" - "middle_border") / 3
      //      "center_diameter": 70,
      //The number of children segments
      //      "number_elements": 30,
      //This can be a style defined for all segments,
      // or an array from index to style, with 'c' (or 'cente') for the center and 'a' (or 'arrow') for the pointer arrow.
//      "style": {
//        "fill": "black",
//        "stroke": "black",
//        "stroke-width": 1
//      },
      //Whether to hide empty containers
      "hide_empty": true,
      //Whether to include a pointer arrow
      "pointer_arrow": true,
      //For table: Place the library in a scrallBox.
      "scroll_box": "vertical",
      "scroll_box_height": "panelHeight - 50 - 50", //this is another way of making it adaptive
      //additional scrollbox parameters
      "scroll_box_params": {
        //        "opposite_slider": true,
        "slider_radius": 5,
        "slider_width": 10,
        "opposite_slider": true,
        "slider_gap": -10
      },
      //Defines an event to be called when apply is initiated.
      "apply": "iamg.addImage",
      "apply_keep_open": true,
      "click": "iamg.clikedImage",
      "region_select": "iamg.region_select",
      "region_select_style": {
        "fill": "lightblue",
        "fillOpacity": 0.4,
        "stroke": "lightblue",
        "strokeWidth": 1,
        "strokeDasharray": ""
      },
      //Library control buttons
      //Whether to place library buttons (in)side or (out)side of the scrollbox
      "scroll_box_buttons": "out", //"in"
      "button_alignment": "centerright",
      "button_orientation": "vertical",
      //Start buttons
      "button_ids": {
        "backward": "iamg_library_backward_icon",
        "forward": "iamg_library_forward_icon"
      },
      //Expected return format for the library
      "format": "json",
      // Defines the REST API parameters for the library
      "GET_keys": {
        //Id can be used to get objets based on a single object id. Useful for hierarchical libraries.
        //It is not the same as the search parameter which, is tag based
        //        "id": "id",
        //Start is the index of the first result to get, is sequential libraries. This number is incremented by the next key.
        "start": "start",
        //The number of results to get. It depends on how many elements the library GUI can show
        "number_results": "number_results",
        //A kew or a token identifying the user requesting the resource.
        //        ,"key": "key",
        //A search string to select what object to return
        //                ,"search": "search"
        //A filter of the results based on type. The filter types are normally predefined,
        "filter": "album"
        //How to sort the results
        //        ,"sort": "sort"
      },
      //Additional key-value pairs that are passed to every request to the library. Alternatively, the values may be
      // hardcoded in the com_url sting.
      "GET_params": {
        //        "database": "sedbase"
      },
      //Defines the default filter value
      "def_filter": "All",
      //the name a function to convert a json presentation of library elements to a svg presentation.
      //defined in function resources
      "svg_converter": "iamg_image_library_json_converter",
      "skip_buttons": false,
      "disconnected": false
      //if true, the library stays open when other libraries open. The default is false, making library close when another opens.
      //for debugging purposes
    },
    "button": {
      "iamg_image_library_button": {
        "activeIcon": "iamg_image_library_icon",
        "inactiveIcon": "",
        "events": {
          "mouse": {
            "click": "iamg_image_libraryToggle"
          }
        },
        "activeDefault": true,
        "height": 35,
        "place": "left",
        "position": {
          "x": 45,
          "y": 12
        },
        "order": 3,
        "group": "library",
        "message": "[Select images] for the gallery.",
        "class": "iamg-button"
      },
      "iamg_image_library_album": {
        "activeIcon": "iamg_library_album_icon",
        "inactiveIcon": "",
        "events": {
          "mouse": {
//            "mouseenter": {
//              "menu": "image_album_menu",
//              "action": "open"
//            },
            "click": {
              "menu": "image_album_menu",
              "action": "toggle"
            }
          }
        },
        "activeDefault": true,
        "height": 35,
        "place": "external",
        // place in non-standard group
        "inGroup": {
          //use an event call to get the group
          "eve": "library.iamg_image_library.getButtonGroup"
        },
        "position": {
          "x": 0,
          "y": -30
        },
        "message": "Limit to [Album] from the gallery.",
        "class": "iamg-button"
      },
      "image_album_menu": {
        "menu": {
          "type": "left",
          "alignment": "top",
          "gap": 10,
          "auto_hide": false,
          "next_to_button": true,
//          "animate": true,
          "background": false
        },
        "place": "left"
      },
      "image_albums": {
        "type": "formFieldMenu",
        //This contains the formfield settings
        "activeIcon": {
          "id": "image_album",
          "elements": "image_albums",
          "initial": "All",
          "style": {
            "stroke": "black",
            "fill": "white"
          },
          "font": "css",
          "height": 25,
          "width": 200,
          "editable": false,
          "no_dropdown": true, //dropdown button in the field. If not editable, the whole field acts as a dropdown button
          "text_change_event": {
            "eve": "library.iamg_image_library.setFilter",
            "params": [true]
          },
          //Dropdown menu settings
          // row_style: {stroke: "green", fill:"none"},
          "menu_style": { //for dropdown
            "fill": "white",
            "stroke": "black"
          },
          "menu_font": {
            "font-size": "12px"
          },
          "alignment": "left",
          "scrollBox_height": 200
        },
        "place": "menu",
        "inMenu": "image_album_menu",
        "height": 200,
        "width": 205
      }
    }
  },
  "iamg_video_library": {
    "iconResource": "iamg/library_buttons.svg",
    "functionResource": "iamg/libraryEvents.js",
    //url of the svg file contacting the library.
    //    "def_url": "library_shell.svg",
    //"library_shell.svg",
    //the communication link to the server to get library objects. See API description below!
    "com_url": "&command=videos",
    "come_type": "GET",
    //The group where to place the library GUI
    "group": "left",
    // Embed the library in the group, changing the panel dimensions
    "embedded": false,
    // Position of the library relative to the group. If right group, the position is of the top right corner.
    "position": {
      "x": 5,
      "y": 45
    },
    //The corner point in the library to use for position: tl, tr, bl, br, c
    "corner": "tl",
    //The properties of the library, if constructed from among the available styles.
    "properties": {
      //The library type. "circle", "tree" , "table", "hierarchical", "linear"
      "type": "table",
      //Equal height and width
      //      "size": 800,
      //      "height": 200,
      //      "width": 400,
      //For Table: the rows and columns of the table.
      "rows": 10,
      "columns": 1,
      //For table: The height is defined by a function that depands on the panel.
      //      "adaptive": true,
      //      For table and if adaptive: keepts the size the maximum provided by "height". Only changes if display is smaller
      "max_height": true,
      //For: tree and table
      "box_width": 100,
      "box_height": 100,
      //For Tree: if true or a string, it adds an edge. If a string, it should be the style of the edge. A style may
      //also be provided in the "style.edges" object below (this has a higher precedence).
      "edges": {
        "stroke": "gray",
        "stroke-width": 1
      },
      // for circle: the thickness of the border between the center and segments.
      //      "middle_border_size": 4,
      //The diameter of the center, recomanded to be ("size" - "middle_border") / 3
      //      "center_diameter": 70,
      //The number of children segments
      //      "number_elements": 30,
      //This can be a style defined for all segments,
      // or an array from index to style, with 'c' (or 'cente') for the center and 'a' (or 'arrow') for the pointer arrow.
      "style": {
        "fill": "black",
        "stroke": "black",
        "stroke-width": 1
      },
      //Whether to hide empty containers
      "hide_empty": true,
      //Whether to include a pointer arrow
      "pointer_arrow": true,
      //For table: Place the library in a scrallBox.
      "scroll_box": "vertical",
      "scroll_box_height": "panelHeight - 50 - 50",
      //this is another way of making it adaptive
      //additional scrollbox parameters
      "scroll_box_params": {
        //        "opposite_slider": true,
        "slider_radius": 5,
        "slider_width": 10,
        "opposite_slider": true,
        "slider_gap": -10
      },
      //Defines an event to be called when apply is initiated.
      "apply": "iamg.addImage",
      "apply_keep_open": true,
      "click": "iamg.clikedImage",
      "region_select": "iamg.region_select",
      "region_select_style": {
        "fill": "lightblue",
        "fillOpacity": 0.4,
        "stroke": "lightblue",
        "strokeWidth": 1,
        "strokeDasharray": ""
      },
      // Defines the REST API parameters for the library
      "GET_keys": {
        //Id can be used to get objets based on a single object id. Useful for hierarchical libraries.
        //It is not the same as the search parameter which, is tag based
        //        "id": "id",
        //Start is the index of the first result to get, is sequential libraries. This number is incremented by the next key.
        "start": "start",
        //The number of results to get. It depends on how many elements the library GUI can show
        "number_results": "number_results"
        //A kew or a token identifying the user requesting the resource.
        //        "key": "key",
        //A search string to select what object to return
        //        "search": "search",
        //A filter of the results based on type. The filter types are normally predefined
        //        "filter": "filter",
        //How to sort the results
        //        "sort": "sort"
      },
      //Additional key-value pairs that are passed to every request to the library. Alternatively, the values may be
      // hardcoded in the com_url sting.
      "GET_params": {
        //        "database": "sedbase"
      },
      "format": "json",
      //the name a function to convert a json presentation of library elements to a svg presentation.
      //defined in function resources
      "svg_converter": "iamg_video_library_json_converter",
      "skip_buttons": false,
      "disconnected": false
      //if true, the library stays open when other libraries open. The default is false, making library close when another opens.
      //for debugging purposes
    },
    "button": {
      "iamg_video_library_button": {
        "activeIcon": "iamg_video_library_icon",
        "inactiveIcon": "",
        "events": {
          "mouse": {
            "click": "iamg_video_libraryToggle"
          }
        },
        "activeDefault": true,
        "height": 37,
        "place": "left",
        "position": {
          "x": 108,
          "y": 10
        },
        "order": 3,
        "group": "library",
        "message": "[Select videos] for the gallery.",
        "class": "iamg-button"
      }
    }
  }
}